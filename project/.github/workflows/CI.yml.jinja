name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*

concurrency:
  group: {% raw %}${{ github.ref }}{% endraw %}
  cancel-in-progress: true

env:
  DEFAULT_PYTHON: "3.11"

permissions: read-all

jobs:
  test:
    name: Test
    runs-on: {% raw %}${{ matrix.os }}{% endraw %}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python {% raw %}${{ matrix.python-version }}{% endraw %}
        uses: actions/setup-python@v4
        with:
          python-version: {% raw %}${{ matrix.python-version }}{% endraw %}

      - name: Install Dependencies
        run: python3 -m pip install --upgrade pip hatch

      - name: Run Tests and Coverage
        run: hatch run tests:run

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python {% raw %}${{ env.DEFAULT_PYTHON }}{% endraw %}
        uses: actions/setup-python@v4
        with:
          python-version: {% raw %}${{ env.DEFAULT_PYTHON }}{% endraw %}

      - name: Install Dependencies
        run: python3 -m pip install --upgrade pip hatch

      - name: Cache Pre-commit Environment
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: {% raw %}${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}{% endraw %}
          restore-keys: |
            {% raw %}${{ runner.os }}-pre-commit-{% endraw %}

      - name: Lint
        run: hatch run lint:run

  codecov:
    name: Codecov
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: python3 -m pip install --upgrade pip hatch

      - name: Run Tests and Coverage
        run: hatch run tests:cov

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml

  docs:
    name: Docs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python {% raw %}${{ env.DEFAULT_PYTHON }}{% endraw %}
        uses: actions/setup-python@v4
        with:
          python-version: {% raw %}${{ env.DEFAULT_PYTHON }}{% endraw %}

      - name: Install Dependencies
        run: python3 -m pip install --upgrade pip hatch

      - name: Build Docs
        run: hatch run docs:build

  publish-docs:
    name: Publish Docs
    runs-on: ubuntu-latest
    permissions:
      pages: write
      contents: write

    needs:
      - docs

    # Only publish docs automatically on new release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python {% raw %}${{ env.DEFAULT_PYTHON }}{% endraw %}
        uses: actions/setup-python@v4
        with:
          python-version: {% raw %}${{ env.DEFAULT_PYTHON }}{% endraw %}

      - name: Install Dependencies
        run: python3 -m pip install --upgrade pip hatch

      - name: Deploy Docs to GitHub Pages
        env:
          # Use the built in CI GITHUB_TOKEN
          GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: hatch run docs:deploy

  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    needs:
      - test
      - lint
      - codecov
      - docs
      - publish-docs

    # Only release on new tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python {% raw %}${{ env.DEFAULT_PYTHON }}{% endraw %}
        uses: actions/setup-python@v4
        with:
          python-version: {% raw %}${{ env.DEFAULT_PYTHON }}{% endraw %}

      - name: Install Dependencies
        run: python3 -m pip install --upgrade pip hatch

      - name: Build sdist and wheel
        run: hatch build

      - name: Publish Draft Release
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: |
          {% raw %}DRAFT_RELEASE_TAG=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft==true) | .tag_name')
          gh release edit $DRAFT_RELEASE_TAG --draft=false --latest --tag ${{ github.ref_name }} --title ${{ github.ref_name }} --repo ${{ github.repository }}
          gh release upload ${{ github.ref_name }} dist/* --repo ${{ github.repository }}{% endraw %}

      - name: Publish Distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: {% raw %}${{ secrets.PYPI_API_TOKEN }}{% endraw %}
