[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]

[tool.poetry]
name = "{{project_slug}}"
version = "0.0.0"
description = "{{description}}"
authors = ["{{author_name}} <{{author_email}}>"]
license = "{{license}}"
homepage = "{{github_url}}"
readme = "README.md"
repository = "{{github_url}}"
documentation = "https://{{github_username}}.github.io/{{project_slug}}/"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Typing :: Typed",
]
include = [ "{{project_slug}}/py.typed" ]
packages = [{include = "{{project_slug}}", from = "src"}]


[tool.poetry.urls]
Documentation = "https://{{github_username}}.github.io/{{project_slug}}/"

[tool.poetry.dependencies]
python = "^3.9"

[tool.poetry.group.dev.dependencies]
black = "^22.12"
covdefaults = "^2.2.2"
coverage = {version = "^7.1.0", extras = ["toml"]}
coverage-badge = "^1.1.0"
isort = "^5.11.4"
mkdocs = "^1.4.2"
mkdocs-material = "^9.0.7"
mypy = "^0.991"
nox = "^2022.11.21"
pre-commit = "^3.0.1"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
ruff = "^0.0.236"

[tool.poetry.group.test.dependencies]
covdefaults = "^2.2.2"
coverage = {version = "^7.1.0", extras = ["toml"]}
coverage-badge = "^1.1.0"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.0.7"

[tool.poetry.group.lint.dependencies]
pre-commit = "^3.0.1"


[tool.isort]
profile = "black"

[tool.coverage.run]
plugins = ["covdefaults"]

[tool.coverage.report]
fail_under = 95
omit = ["noxfile.py"]

[tool.mypy]
files = [ "**/*.py" ]
ignore_missing_imports = true
strict = true
pretty = true
disallow_untyped_decorators = false
show_error_codes = true
warn_unreachable = true
enable_error_code = [ "ignore-without-code", "redundant-expr", "truthy-bool" ]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "info"
testpaths = ["tests"]
pythonpath = ["src"]

[tool.ruff]
target-version = "py39"
line-length = 120
select = [
  # https://github.com/charliermarsh/ruff#supported-rules
  "E",   # Pycodestyle errors
  "F",   # Pyflakes errors
  "W",   # Pycodestyle warnings
  "UP",  # All pyupgrade rules
  "N",   # PEP8 naming
  "I",   # Isort
  "D",   # Pydocstyle
  "C90", # Complexity
  "C4",  # Flake8 comprehensions
  "ERA", # Commented out code
  "B",   # Flake8 bugbear
  "RUF", # Ruff specific rules
  "YTT", # Flake8 2020
  "ANN", # Type annotations
  "BLE", # No blind excepts
  "PIE", # Flake8 pie
  "PT",  # Pytest style
  "RET", # Function returns
  "SIM", # Simplify
  "ARG", # Unused arguments
  "PTH", # Use pathlib over os.path
  "PGH", # Pygrep hooks
  "DTZ", # Datetime timezone gotchas
  "FBT", # Flake8 boolean trap
  "S",   # Bandit (security)
  "A",   # Don't shadow builtins
  "INP", # No implicit namespace packages (causes import errors)
  "T20", # No print statements
  "RSE", # When raising an exception chain, use from
  "SLF", # Flake8-self, private member access
  "TCH", # Stuff for typing is behind an if TYPE_CHECKING block
]
ignore = [
  "D203",   # One blank line before class docstring
  "D212",   # Multi-line docstring summary should be on the first line
  "D105",   # Missing docstring in magic method (non init)
  "D200",   # One line docstring should all be on one line
  "D401",   # First line should be in imperative mood
  "D205",   # One blank line required between summary line and description
  "D417",   # Wants sphinx style docstrings
  "D406",   # Section names should end with a newline
  "D407",   # Missing dashed underline after section
  "ANN101", # Missing type annotation for self in method
]

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.isort]
required-imports = [ "from __future__ import annotations" ]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
  "ARG001", # Thinks pytest fixtures are unused arguments
  "D104",   # Missing docstring in __init__.py in tests (which is fine)
  "FBT001", # Tests are allowed positional bools (fixtures etc.)
  "S101",   # Assert is allowed in tests (obviously)
  "TCH",    # Tests will be run with dev dependencies so we don't care
]
"conftest.py" = [
  "TCH", # Conftest is only run for tests (with dev dependencies)
]
